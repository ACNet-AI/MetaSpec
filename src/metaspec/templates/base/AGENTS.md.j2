# {{ name }} - AI Agent Guide

> **For AI Assistants**: This document provides guidance on using {{ name }} for {{ domain }} development.

---

## üéØ Your Role

You are helping a developer use **{{ name }}** - a spec-driven toolkit for {{ domain }} projects.

**Toolkit Version**: {{ version }}  
**Domain**: {{ domain }}  
**Lifecycle**: {{ lifecycle }}

---

## üìã Core Entity: {{ entity.name }}

This toolkit centers around the `{{ entity.name }}` entity with the following structure:

{% for field in entity.fields %}
- **{{ field.name }}** (`{{ field.type }}`): {{ field.description }}
{% endfor %}

---

## üîß Available Commands

{% if commands %}
{% for command in commands %}
### `{{ command.name }}`

{{ command.description }}

{% if command.options %}
**Options**:
{% for option in command.options %}
- `--{{ option.name }}` ({{ option.type }}){% if option.required %} *required*{% endif %}: {{ option.description }}
{% endfor %}
{% endif %}

{% endfor %}
{% else %}
Standard commands available:
- `init` - Initialize a new {{ entity.name }} specification
- `validate` - Validate an existing specification
- `generate` - Generate code from specification
{% endif %}

---

## üìù Workflow

### Standard Flow

```
1. Initialize Specification
   ‚Üì
2. Define {{ entity.name }} Structure
   ‚Üì
3. Validate Specification
   ‚Üì
4. Generate Implementation
   ‚Üì
5. Customize & Extend
```

### Example Session

```
Human: "I need to create a new {{ entity.name }}"

AI: "I'll help you create a {{ entity.name }} using {{ name }}.

First, let me initialize the specification:

[Creates {{ entity.name | lower }}-spec.md with appropriate structure]

This defines:
{% for field in entity.fields[:3] %}
- {{ field.name }}: {{ field.description }}
{% endfor %}

Would you like me to validate and generate it?"
```

---

## üîí Constitutional Constraints

**ALWAYS follow** `memory/constitution.md` which defines:
- Core principles for this toolkit
- Quality standards
- Prohibited patterns
- Required patterns

**Key principles**:
1. **Specification-First**: Always define specs before implementation
2. **Validation-Driven**: Validate specs before generation
3. **Incremental Development**: Start with MVP, add features progressively
4. **Domain Specificity**: Respect {{ domain }} constraints

---

## üé® Domain-Specific Guidance

{% if domain == "mcp" %}
### MCP (Model Context Protocol) Specifics

- **Tools**: Define clear tool schemas with input/output types
- **Resources**: Specify resource URIs and access patterns
- **Prompts**: Document prompt templates and expected responses
- **Error Handling**: Always include error cases in specifications
{% elif domain == "web" %}
### Web API Specifics

- **Endpoints**: Define RESTful routes with HTTP methods
- **Request/Response**: Specify JSON schemas
- **Authentication**: Document auth requirements
- **Rate Limiting**: Consider rate limit specifications
{% elif domain == "ai" %}
### AI Agent Specifics

- **Capabilities**: Define agent capabilities and limitations
- **Context**: Specify context requirements
- **Prompts**: Document system and user prompts
- **Safety**: Include safety constraints
{% else %}
### Generic Best Practices

- Follow industry standards for {{ domain }}
- Document all assumptions
- Include validation rules
- Provide clear examples
{% endif %}

---

## üöÄ Quick Start

```bash
# 1. Initialize new specification
{{ package_name }} init my-{{ entity.name | lower }}-spec.md

# 2. Edit specification (use your editor)
# Define {{ entity.name }} structure

# 3. Validate specification
{{ package_name }} validate my-{{ entity.name | lower }}-spec.md

# 4. Generate implementation
{{ package_name }} generate my-{{ entity.name | lower }}-spec.md --output ./output
```

---

## üìö Examples

See `examples/` directory for:
- Minimal {{ entity.name }} specification
- Complete {{ entity.name }} with all fields
- Common patterns and anti-patterns

---

## üêõ Troubleshooting

### Issue: Validation fails

**Solution**: Check specification format against schema. Common issues:
{% for field in entity.fields %}
- Missing required field: `{{ field.name }}`
{% endfor %}

### Issue: Generation produces errors

**Solution**: Ensure specification is validated first. Run:
```bash
{{ package_name }} validate <spec-file> --strict
```

---

**Generated by**: MetaSpec {{ metaspec_version }}  
**Date**: {{ date }}  
**Domain**: {{ domain }}

